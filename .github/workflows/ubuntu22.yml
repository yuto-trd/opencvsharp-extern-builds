name: Ubuntu 22.04

on:
  workflow_dispatch:
    inputs:
      openCvSharpRef:
        required: true
        default: ''
        type: string
      openCvVersion:
        required: true
        default: '4.10.0'
        type: string
      releaseTag:
        required: true
        default: '4.10.0'
        type: string
      createRelease:
        required: true
        default: false
        type: boolean
      dryRun:
        required: true
        default: true
        type: boolean

  schedule:
    - cron: '0 0 * * *'

env:
  DEBIAN_FRONTEND: noninteractive
  OPENCV_CACHE_VERSION: 1
  GH_TOKEN: ${{ github.token }}

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
      - if: ${{ github.event_name == 'workflow_dispatch' }}
        name: Set environment
        run: |
          echo "OPENCV_VERSION=${{ inputs.openCvVersion }}" >> $GITHUB_ENV
          echo "OPENCVSHARP_REF=${{ inputs.openCvSharpRef }}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${{ inputs.releaseTag }}" >> $GITHUB_ENV

      - if: ${{ github.event_name == 'schedule' }}
        name: Set environment
        shell: pwsh
        run: |
          $RELEASE=gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/shimat/opencvsharp/releases/latest
          $TAG = (echo $RELEASE | jq -r '.tag_name')
          $OPENCV_VERSION = [System.String]::Join('.', [System.Linq.Enumerable]::Take($TAG.Split('.'), 3))
          "OPENCV_VERSION=$OPENCV_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
          "OPENCVSHARP_REF=$TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          "RELEASE_TAG=$TAG" | Out-File -FilePath $env:GITHUB_ENV -Append

      - if: ${{ github.event_name == 'schedule' || inputs.createRelease || inputs.dryRun }}
        name: Check release
        id: check_release
        continue-on-error: true
        run: |
          gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/yuto-trd/opencvsharp-extern-builds/releases/tags/$OPENCVSHARP_REF
          echo "ALREADY_RELEASED=True" >> $GITHUB_ENV

      - name: Show environment
        run: |
          echo "OPENCV_VERSION: $OPENCV_VERSION"
          echo "OPENCVSHARP_REF: $OPENCVSHARP_REF"
          echo "ALREADY_RELEASED: $ALREADY_RELEASED"

      - if: ${{ steps.check_release.outcome == 'failure' }}
        run: |
          echo "ALREADY_RELEASED=False" >> $GITHUB_ENV

      - if: ${{ github.event_name == 'schedule' && env.ALREADY_RELEASED == 'True' }}
        name: Cancel workflow
        uses: styfle/cancel-workflow-action@0.9.1

      - uses: actions/checkout@v3
        with:
          repository: shimat/opencvsharp
          path: opencvsharp
          ref: ${{ env.OPENCVSHARP_REF }}
          
      - name: Install dependencies
        run: |
          sudo apt-get update -y 
          sudo apt-get install -y  --no-install-recommends \
            apt-transport-https \
            software-properties-common \
            ca-certificates \
            build-essential \
            cmake \
            libtbb-dev \
            libatlas-base-dev \
            libgtk2.0-dev \
            libavcodec-dev \
            libavformat-dev \
            libswscale-dev \
            libdc1394-dev \
            libxine2-dev \
            libv4l-dev \
            libtheora-dev \
            libvorbis-dev \
            libxvidcore-dev \
            libopencore-amrnb-dev \
            libopencore-amrwb-dev \
            x264 \
            libtesseract-dev

      - name: Cache OpenCV
        id: opencv-cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/opencv_artifacts/
          key: opencv-${{ env.OPENCV_VERSION }}-rev${{ env.OPENCV_CACHE_VERSION }}

      - name: Checkout OpenCV
        if: steps.opencv-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
            repository: opencv/opencv
            path: opencv
            ref: ${{ env.OPENCV_VERSION }}
      - name: Checkout OpenCV Contrib
        if: steps.opencv-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
            repository: opencv/opencv_contrib
            path: opencv_contrib
            ref: ${{ env.OPENCV_VERSION }}

      - name: Build OpenCV
        if: steps.opencv-cache.outputs.cache-hit != 'true'
        run: |
          mkdir opencv/build && cd opencv/build
          cmake \
            -D CMAKE_BUILD_TYPE=Release \
            -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
            -D BUILD_SHARED_LIBS=OFF \
            -D ENABLE_CXX11=ON \
            -D BUILD_EXAMPLES=OFF \
            -D BUILD_DOCS=OFF \
            -D BUILD_PERF_TESTS=OFF \
            -D BUILD_TESTS=OFF \
            -D BUILD_JAVA=OFF \
            -D BUILD_opencv_apps=OFF \
            -D BUILD_opencv_barcode=OFF \
            -D BUILD_opencv_java_bindings_generator=OFF \
            -D BUILD_opencv_python_bindings_generator=OFF \
            -D BUILD_opencv_python_tests=OFF \
            -D BUILD_opencv_ts=OFF \
            -D BUILD_opencv_js=OFF \
            -D BUILD_opencv_js_bindings_generator=OFF \
            -D BUILD_opencv_bioinspired=OFF \
            -D BUILD_opencv_ccalib=OFF \
            -D BUILD_opencv_datasets=OFF \
            -D BUILD_opencv_dnn_objdetect=OFF \
            -D BUILD_opencv_dpm=OFF \
            -D BUILD_opencv_fuzzy=OFF \
            -D BUILD_opencv_gapi=ON \
            -D BUILD_opencv_intensity_transform=OFF \
            -D BUILD_opencv_mcc=OFF \
            -D BUILD_opencv_objc_bindings_generator=OFF \
            -D BUILD_opencv_rapid=OFF \
            -D BUILD_opencv_reg=OFF \
            -D BUILD_opencv_stereo=OFF \
            -D BUILD_opencv_structured_light=OFF \
            -D BUILD_opencv_surface_matching=OFF \
            -D BUILD_opencv_wechat_qrcode=ON \
            -D BUILD_opencv_videostab=OFF \
            -D WITH_GSTREAMER=OFF \
            -D WITH_ADE=OFF \
            -D OPENCV_ENABLE_NONFREE=ON \
            -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/opencv_artifacts ..
          make -j2
          make install
          sudo ldconfig
          cd ${GITHUB_WORKSPACE}
          ls
      
      - name: Build OpenCvSharpExtern
        run: |
          mkdir opencvsharp/src/build && cd $_
          cmake -D CMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/opencv_artifacts ..
          make -j2
          ls OpenCvSharpExtern
          cp OpenCvSharpExtern/libOpenCvSharpExtern.so ${GITHUB_WORKSPACE}/opencvsharp/nuget/

      - name: Check OpenCvSharpExtern
        run: |
          cd ${GITHUB_WORKSPACE}/opencvsharp/nuget/
          ldd libOpenCvSharpExtern.so
          nm libOpenCvSharpExtern.so
          echo -ne "#include <stdio.h> \n int core_Mat_sizeof(); int main(){ int i = core_Mat_sizeof(); printf(\"sizeof(Mat) = %d\", i); return 0; }" > test.c
          gcc -I./ -L./ test.c -o test -lOpenCvSharpExtern
          LD_LIBRARY_PATH=. ./test

      - name: Copy deps
        run: |
          SO_FILE=${GITHUB_WORKSPACE}/opencvsharp/nuget/libOpenCvSharpExtern.so
          OUTPUT_DIR=${GITHUB_WORKSPACE}/opencvsharp/so_dependencies

          # 出力ディレクトリの作成
          mkdir -p "$OUTPUT_DIR"

          # コピー済みのライブラリを記録するための連想配列（bash 4以降が必要）
          declare -A COPIED_LIBS

          # 再帰的に依存ライブラリをコピーする関数
          copy_dependency() {
              local file=$1

              # ファイルが存在しない場合はスキップ
              if [ -z "$file" ] || [ ! -f "$file" ]; then
                  return
              fi

              # 既にコピー済みなら処理しない
              if [[ -n "${COPIED_LIBS[$file]}" ]]; then
                  return
              fi

              # コピー済みとしてマーク
              COPIED_LIBS["$file"]=1

              echo "Copying $file..."
              cp "$file" "$OUTPUT_DIR"

              # このライブラリの依存関係を取得（パスが'/'から始まるものを対象）
              local deps
              deps=$(ldd "$file" 2>/dev/null | awk '{print $3}' | grep '^/')

              for dep in $deps; do
                  copy_dependency "$dep"
              done
          }

          # 初回の.soファイルから再帰的に依存ライブラリをコピー
          copy_dependency "$SO_FILE"

          # 最後に収集したライブラリをzip化
          echo "Creating zip file so_dependencies.zip..."
          zip -r ${GITHUB_WORKSPACE}/opencvsharp/so_dependencies.zip "$OUTPUT_DIR"

      - uses: actions/upload-artifact@v3
        with:
          name: libOpenCvSharpExtern.so
          path: ${{ github.workspace }}/opencvsharp/nuget/libOpenCvSharpExtern.so

      
      - uses: actions/upload-artifact@v3
        with:
          name: so_dependencies.zip
          path: ${{ github.workspace }}/opencvsharp/so_dependencies.zip

      - if: ${{ env.ALREADY_RELEASED == 'False' && (github.event_name == 'schedule' || inputs.createRelease) }}
        name: Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ github.workspace }}/opencvsharp/nuget/libOpenCvSharpExtern.so
          tag: ${{ env.RELEASE_TAG }}
          draft: false
          makeLatest: true
